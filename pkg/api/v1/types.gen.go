// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer.
	// Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer.
	// Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID openapi_types.UUID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Scope Grantable scopes
	Scope string `json:"scope"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bNhT+KwS3hw1Qbbd981saD4G6FSviBH1IgoKmji2mEsny4tQw9N+HQ0qxbMlO",
	"421F3e1Npqhz+b7vXOA15arUSoJ0lo7X1PIcShYezw0wB6m1Hgz+1kZpME5AeMsLJsqPJdNayEU4YVkm",
	"nFCSFe+3brqVBjqm1hkhF7RKaAaWG6HxLh3T89/+IPBFG7BWKGlJbZI49QkkCW4scYool4Opf9Oksapm",
	"98AdWr1/+GQ/eiPQ5baHtx9+n5Lry3TzVR1LQr+8WKgXkpVQX8NbVULjya6dM5L7kskXBljGZgUQvEbm",
	"yhCXAxERqKSbb29Q15fpzqcD8s5bR0rmeB6Ob6mw9pbGnMmSFR6IkERIrkpE6O2HK/tETiGfKqEGPnth",
	"IKPjm5hcjKqF2l2V1Iz/eeZdfl4IkK5L+zHI8Girg0xfXBjGBApwcAlWK2mhG4P1nIO1PWEUD2xliTMe",
	"Bht3M6UKYLLjrzGDLk9G5SLrpp1OiJpva3CuTMkcHVPvRfaERtLJj1E+t/Lb1E8AtL+Ikl3BbLR1rTPm",
	"4P8+etJCqBJ6sDsynwmQvCfnC8OkC8k2d9CjcFD2c1sfMGPYal/dh1DIq8GIxHhIOjmq9PtZmmx+YXs5",
	"39PEE2q50gczDhds76fADbg9mbUSm8Z7T02QdmU+UtEEeBfoE3Kuuv6mwL0RbkWuQrFMwSwFB/LL9Gr6",
	"K3nHJFtAiXGcvU+JsITJ8ISyIyW+RRFNr6aEKzkXC28Y2rVhBglXwH4P27ZpQpdgbIxpNBgNXiJISoNk",
	"WtAxfT0YDV7ThGrm8iCbIdNiuHw5jBPWDtfxIZ1UMUeco/iEGg0xpVlgFs/bQkaThpXgwFg6vukXGm+J",
	"TOAxhtEAPqaNa9rmBEdxUi+VGMhhcVbVHX4c535I8NVoFJqkkq4uOKZ1IXhIZnhvMbx1y/7PBuZ0TH8a",
	"brbaYb3SDnfWiiCHHRnEjWDuC9K6llDry5KZVQNdEMA2fI5h775pd4fY/BdR3tsEXID7z6HfTvgo6C8Q",
	"eCxfzAGbEpsp7x6paPXBwX5CquSxZuKwsMO1yL6iWtJmKh2kKm5i0TLO2tpmL2OBgR+gUsyBSoFQKjUe",
	"D8LFcbwQS5AknbR5ivgerpl4580qqPxZPCzC8DgtEmrFHQX+Rd2kagRmqwNoa1yTunjHffU42fu46/5r",
	"iH/2YN0bla3+YbDrHb3a3iswxOo7JTpG3OK6n+VW23MgWVgV4kM6qZrtIayzyvbUXvd/geeMLJsrX2Rk",
	"BmSmvMxQIC4XljQB9Ouk9fa7U0sXj28smb89TGMGQTeKbbj6usnZI6F6mD4loee0k2gc1cLDt01/EfJU",
	"BdMu9NNoLy2ZHGwvVfVXAAAA///c8zKjSBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
